head	1.13;
access;
symbols;
locks
	abhi:1.13; strict;
comment	@ * @;


1.13
date	2017.08.13.05.23.51;	author abhi;	state Exp;
branches;
next	1.12;

1.12
date	2017.07.27.17.47.12;	author abhi;	state Exp;
branches;
next	1.11;

1.11
date	2017.07.24.07.51.48;	author abhi;	state Exp;
branches;
next	1.10;

1.10
date	2017.07.15.16.41.43;	author abhi;	state Exp;
branches;
next	1.9;

1.9
date	2017.07.15.04.36.35;	author abhi;	state Exp;
branches;
next	1.8;

1.8
date	2017.07.15.04.35.16;	author abhi;	state Exp;
branches;
next	1.7;

1.7
date	2017.07.14.06.18.28;	author abhi;	state Exp;
branches;
next	1.6;

1.6
date	2017.07.13.17.55.08;	author abhi;	state Exp;
branches;
next	1.5;

1.5
date	2017.07.13.17.10.56;	author abhi;	state Exp;
branches;
next	1.4;

1.4
date	2017.07.13.17.07.04;	author abhi;	state Exp;
branches;
next	1.3;

1.3
date	2017.07.13.16.58.51;	author abhi;	state Exp;
branches;
next	1.2;

1.2
date	2017.07.04.16.38.58;	author abhi;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.03.16.48.57;	author abhi;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove print statment
@
text
@#include"header.h"
#include"declaration.h"
int Compression3(int fd,char* ma)
{

	printf("%s : Begins\n",__func__);
	unsigned char c,byt; char ch;
        int cfd,efd,i,ret;
        int (*Openfileptr)(char*);
        Openfileptr=Open_File;
        int (*Findindexptr)(char,char*);
        Findindexptr=Find_Index;
        printf("opening Compressed file\n");
        cfd=Openfileptr("O_RDWR");
        printf("open Encryption file\n");
        efd=Openfileptr("O_WRONLY");

        while(1)
	{	
		byt^=byt;
		c^=c;
		
		ret=read(fd,&ch,1);
		if(ret==0)
		{
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			
			c|=0x0F;
			c<<=1;
			byt|=c;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=3;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x03;
			write(cfd,&byt,1);
			byt^=byt;
			byt|=0x01;
			byt<<=7;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=6;
		byt|=c;
		write(cfd,&byt,1);

		byt^=byt;
		c=ch;
		c<<=7;
		byt|=c;


		ret=read(fd,&ch,1);
		if(ret==0)
		{
			c|=0x0F;
			c<<=3;
			byt|=c;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=1;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x0F;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=4;
		byt|=c;
		
		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x01;
			write(cfd,&byt,1);
			byt|=0x03;
			byt<<=6;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=7;
		byt|=c;
		write(cfd,&byt,1);
		
		byt^=byt;
		c=ch;
		c<<=6;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			c|=0x0F;
			c<<=2;
			byt|=c;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=2;
		byt|=c;
		
		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x07;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=5;
		c>>=5;
		byt|=c;
		write(cfd,&byt,1);
	}
	write(efd,ma,strlen(ma));
	printf("%s : Ends\n",__func__);

	close(efd);
	return cfd;
}
@


1.12
log
@change eof
@
text
@a23 1
		printf("value in ch is %c\n",ch);
a28 1
		printf("value of index is %d\n",i);
a34 1
		printf("value in ch is %c\n",ch);
a44 1
		printf("value of index is %d\n",i);
a51 1
		printf("value in ch is %c\n",ch);
a62 1
		printf("value of index is %d\n",i);
a76 1
		printf("value in ch is %c\n",ch);
a85 1
		printf("value of index is %d\n",i);
a92 1
		printf("value in ch is %c\n",ch);
a99 1
		printf("value of index is %d\n",i);
a106 1
		printf("value in ch is %c\n",ch);
a116 1
		printf("value of index is %d\n",i);
a129 1
		printf("value in ch is %c\n",ch);
a138 1
		printf("value of index is %d\n",i);
a145 1
		printf("value in ch is %c\n",ch);
a152 1
		printf("value of index is %d\n",i);
@


1.11
log
@se
@
text
@d8 1
a8 1
        int cfd,efd,i;
d23 1
a23 1
		read(fd,&ch,1);
d25 1
a25 1
		if(ch==10)
d36 1
a36 1
		read(fd,&ch,1);
d38 1
a38 1
		if(ch==10)
d55 1
a55 1
		read(fd,&ch,1);
d57 1
a57 1
		if(ch==10)
d82 1
a82 1
		read(fd,&ch,1);
d84 1
a84 1
		if(ch==10)
d100 1
a100 1
		read(fd,&ch,1);
d102 1
a102 1
		if(ch==10)
d116 1
a116 1
		read(fd,&ch,1);
d118 1
a118 1
		if(ch==10)
d141 1
a141 1
		read(fd,&ch,1);
d143 1
a143 1
		if(ch==10)
d159 1
a159 1
		read(fd,&ch,1);
d161 1
a161 1
		if(ch==10)
@


1.10
log
@Change in printf statment
@
text
@d14 1
a14 1
        cfd=Openfileptr("O_WRONLY");
d41 3
a43 2
			byt|=0x0F;
			byt<<=1;
d86 3
a88 2
			byt|=0x0F;
			byt<<=3;
d145 3
a147 2
			byt|=0x0F;
			byt<<=2;
d178 1
a178 1
	close(cfd);
d180 1
@


1.9
log
@se
@
text
@d6 1
a6 1
	printf("compression 3 function begins\n");
d174 1
a174 1
	printf("compression 3 function ends\n");
@


1.8
log
@added xor statment
@
text
@d22 1
a22 1
		x^=x;
@


1.7
log
@se
@
text
@d20 3
@


1.6
log
@se
@
text
@a23 3
			byt|=0x0F;
			byt<<=4;
			write(cfd,&byt,1);
@


1.5
log
@addded print statment to print index value
write in ef
@
text
@d133 1
@


1.4
log
@close the filediscriptor
added print statment
@
text
@d30 1
d47 1
d67 1
d91 1
d107 1
d126 1
d148 1
d164 1
d172 1
@


1.3
log
@open 2 files cf and ef and store the data of the source file in cf in bits form
basically shift and or operations are performed and done for 8 times 
one while loop writes 3 times in a particular byte
@
text
@d21 1
d36 1
d53 1
d79 1
d95 1
d110 1
d133 1
d149 1
d165 2
a166 1
	
@


1.2
log
@passed two Arguments .
@
text
@d7 10
d18 138
d157 1
a157 1

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
int Compression3()
@
