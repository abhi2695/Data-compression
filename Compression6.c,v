head	1.8;
access;
symbols;
locks
	abhi:1.8; strict;
comment	@ * @;


1.8
date	2017.08.13.05.24.06;	author abhi;	state Exp;
branches;
next	1.7;

1.7
date	2017.07.27.17.47.29;	author abhi;	state Exp;
branches;
next	1.6;

1.6
date	2017.07.24.07.51.55;	author abhi;	state Exp;
branches;
next	1.5;

1.5
date	2017.07.16.02.45.40;	author abhi;	state Exp;
branches;
next	1.4;

1.4
date	2017.07.15.16.54.43;	author abhi;	state Exp;
branches;
next	1.3;

1.3
date	2017.07.15.16.42.15;	author abhi;	state Exp;
branches;
next	1.2;

1.2
date	2017.07.04.16.42.12;	author abhi;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.03.16.49.12;	author abhi;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove print statment
@
text
@#include"header.h"
#include"declaration.h"
int Compression6(int fd,char* ma)
{

	printf("%s: Begins\n",__func__);

	unsigned char c,byt; char ch;
        int cfd,efd,i,ret;
        
	int (*Openfileptr)(char*);
        Openfileptr=Open_File;
        int (*Findindexptr)(char,char*);
        Findindexptr=Find_Index;
        
	printf("opening Compressed file\n");
        cfd=Openfileptr("O_RDWR");
        printf("open Encryption file\n");
        efd=Openfileptr("O_WRONLY");

	while(1)
	{
		byt^=byt;
		c^=c;
		ret=read(fd,&ch,1);
		if(ret==0)
		{
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=2;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x03;
			write(cfd,&byt,1);
			byt^=byt;
			byt|=0x0F;
			byt<<=4;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=2;
		c>>=6;
		byt|=c;
		write(cfd,&byt,1);

		byt^=byt;
		c=ch;
		c<<=4;
		byt|=c;
		
		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x0F;
			write(cfd,&byt,1);
			byt^=byt;
			byt|=0x03;
			byt<<=6;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=2;
		c>>=4;
		byt|=c;
		write(cfd,&byt,1);

		byt^=byt;
		c=ch;
		c<<=6;
		byt|=c;

		ret=read(fd,&ch,1);
		if(ret==0)
		{
			byt|=0x3F;
			write(cfd,&byt,1);
			break;
		}
		i=Findindexptr(ch,ma);
		ch=(char)i;
		c=ch;
		c<<=2;
		c>>=2;
		byt|=c;
		write(cfd,&byt,1);
	}
	write(efd,ma,strlen(ma));
	close(efd);
	printf("%s: Begins\n",__func__);

}
@


1.7
log
@change eof
@
text
@a25 1
		printf("value in ch is %c\n",ch);
a36 1
		printf("value in ch is %c\n",ch);
a60 1
		printf("value in ch is %c\n",ch);
a84 1
		printf("value in ch is %c\n",ch);
a101 1
	return cfd;
@


1.6
log
@se
@
text
@d9 1
a9 1
        int cfd,efd,i;
d25 1
a25 1
		read(fd,&ch,1);
d27 1
a27 1
		if(ch==10)
d37 1
a37 1
		read(fd,&ch,1);
d39 1
a39 1
		if(ch==10)
d62 1
a62 1
		read(fd,&ch,1);
d64 1
a64 1
		if(ch==10)
d87 1
a87 1
		read(fd,&ch,1);
d89 1
a89 1
		if(ch==10)
@


1.5
log
@added xor statment
@
text
@d17 1
a17 1
        cfd=Openfileptr("O_WRONLY");
a103 1
	close(cfd);
d106 1
@


1.4
log
@se
@
text
@d8 1
a8 1
	unsigned char c,byt, ch;
d23 2
@


1.3
log
@this function is used to compress 64 bit code
in a single while 4 values are read from sourcefile and 3 times write into cf
@
text
@d8 1
a8 1
	unsigned char c,byt; char ch;
@


1.2
log
@Passed two arguments
@
text
@d6 1
a6 1
	printf("compression 6 function begins\n");
d8 97
a104 1
	printf("compression 6 function ends\n");
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
int Compression6()
@
